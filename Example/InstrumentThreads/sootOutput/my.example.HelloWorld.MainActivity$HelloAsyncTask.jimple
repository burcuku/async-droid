class my.example.HelloWorld.MainActivity$HelloAsyncTask extends android.os.AsyncTask
{
    final my.example.HelloWorld.MainActivity this$0;

    private void <init>(my.example.HelloWorld.MainActivity)
    {
        my.example.HelloWorld.MainActivity$HelloAsyncTask $r0;
        my.example.HelloWorld.MainActivity $r1;

        $r0 := @this: my.example.HelloWorld.MainActivity$HelloAsyncTask;
        $r1 := @parameter0: my.example.HelloWorld.MainActivity;
        $r0.<my.example.HelloWorld.MainActivity$HelloAsyncTask: my.example.HelloWorld.MainActivity this$0> = $r1;
        specialinvoke $r0.<android.os.AsyncTask: void <init>()>();
        return;
    }

    void <init>(my.example.HelloWorld.MainActivity, my.example.HelloWorld.MainActivity$HelloAsyncTask)
    {
        my.example.HelloWorld.MainActivity$HelloAsyncTask $r0, $r2;
        my.example.HelloWorld.MainActivity $r1;

        $r0 := @this: my.example.HelloWorld.MainActivity$HelloAsyncTask;
        $r1 := @parameter0: my.example.HelloWorld.MainActivity;
        $r2 := @parameter1: my.example.HelloWorld.MainActivity$HelloAsyncTask;
        specialinvoke $r0.<my.example.HelloWorld.MainActivity$HelloAsyncTask: void <init>(my.example.HelloWorld.MainActivity)>($r1);
        return;
    }

    protected transient volatile java.lang.Object doInBackground(java.lang.Object[])
    {
        my.example.HelloWorld.MainActivity$HelloAsyncTask $r0;
        java.lang.Object[] $r1;
        java.lang.Void $r2;
        java.lang.Integer[] $r3;

        $r0 := @this: my.example.HelloWorld.MainActivity$HelloAsyncTask;
        staticinvoke <myScheduler.MyScheduler: void waitMyTurn()>();
        $r1 := @parameter0: java.lang.Object[];
        $r3 = (java.lang.Integer[]) $r1;
        $r2 = virtualinvoke $r0.<my.example.HelloWorld.MainActivity$HelloAsyncTask: java.lang.Void doInBackground(java.lang.Integer[])>($r3);
        return $r2;
    }

    protected transient java.lang.Void doInBackground(java.lang.Integer[])
    {
        my.example.HelloWorld.MainActivity$HelloAsyncTask $r0;
        java.lang.Integer[] $r1;
        java.lang.InterruptedException $r2, $r7;
        long $l0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.lang.Thread $r6;

        $r0 := @this: my.example.HelloWorld.MainActivity$HelloAsyncTask;
        staticinvoke <myScheduler.MyScheduler: void waitMyTurn()>();
        $r1 := @parameter0: java.lang.Integer[];

     label1:
        staticinvoke <java.lang.Thread: void sleep(long)>(2000L);

     label2:
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Background job of AsyncTask #");
        $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is running on thread ");
        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        $l0 = virtualinvoke $r6.<java.lang.Thread: long getId()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("AsycTask", $r4);
        virtualinvoke $r0.<my.example.HelloWorld.MainActivity$HelloAsyncTask: void publishProgress(java.lang.Object[])>($r1);

     label3:
        staticinvoke <java.lang.Thread: void sleep(long)>(2000L);

     label4:
        staticinvoke <myScheduler.MyScheduler: void notifyCompletion()>();
        return null;

     label5:
        $r2 := @caughtexception;
        virtualinvoke $r2.<java.lang.InterruptedException: void printStackTrace()>();
        goto label2;

     label6:
        $r7 := @caughtexception;
        virtualinvoke $r7.<java.lang.InterruptedException: void printStackTrace()>();
        goto label4;

        catch java.lang.InterruptedException from label1 to label2 with label5;
        catch java.lang.InterruptedException from label3 to label4 with label6;
    }

    protected volatile void onPostExecute(java.lang.Object)
    {
        my.example.HelloWorld.MainActivity$HelloAsyncTask $r0;
        java.lang.Object $r1;
        java.lang.Void $r2;

        $r0 := @this: my.example.HelloWorld.MainActivity$HelloAsyncTask;
        staticinvoke <myScheduler.MyScheduler: void waitMyTurn()>();
        $r1 := @parameter0: java.lang.Object;
        $r2 = (java.lang.Void) $r1;
        virtualinvoke $r0.<my.example.HelloWorld.MainActivity$HelloAsyncTask: void onPostExecute(java.lang.Void)>($r2);
        return;
    }

    protected void onPostExecute(java.lang.Void)
    {
        my.example.HelloWorld.MainActivity$HelloAsyncTask $r0;
        java.lang.Void $r1;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.lang.Thread $r5;
        long $l0;

        $r0 := @this: my.example.HelloWorld.MainActivity$HelloAsyncTask;
        staticinvoke <myScheduler.MyScheduler: void waitMyTurn()>();
        $r1 := @parameter0: java.lang.Void;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Postexecuting.... ");
        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        $l0 = virtualinvoke $r5.<java.lang.Thread: long getId()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("AsyncTask", $r4);
        specialinvoke $r0.<android.os.AsyncTask: void onPostExecute(java.lang.Object)>($r1);
        return;
    }

    protected void onPreExecute()
    {
        my.example.HelloWorld.MainActivity$HelloAsyncTask $r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.Thread $r4;
        long $l0;

        $r0 := @this: my.example.HelloWorld.MainActivity$HelloAsyncTask;
        staticinvoke <myScheduler.MyScheduler: void waitMyTurn()>();
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Preexecuting.... ");
        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        $l0 = virtualinvoke $r4.<java.lang.Thread: long getId()>();
        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("AsyncTask", $r3);
        specialinvoke $r0.<android.os.AsyncTask: void onPreExecute()>();
        return;
    }

    protected transient void onProgressUpdate(java.lang.Integer[])
    {
        my.example.HelloWorld.MainActivity$HelloAsyncTask $r0;
        java.lang.Integer[] $r1;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.lang.Thread $r5;
        long $l0;

        $r0 := @this: my.example.HelloWorld.MainActivity$HelloAsyncTask;
        staticinvoke <myScheduler.MyScheduler: void waitMyTurn()>();
        $r1 := @parameter0: java.lang.Integer[];
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Progress update job of AsyncTask #");
        $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is running on thread ");
        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        $l0 = virtualinvoke $r5.<java.lang.Thread: long getId()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("AsyncTask", $r4);
        specialinvoke $r0.<android.os.AsyncTask: void onProgressUpdate(java.lang.Object[])>($r1);
        return;
    }

    protected transient volatile void onProgressUpdate(java.lang.Object[])
    {
        my.example.HelloWorld.MainActivity$HelloAsyncTask $r0;
        java.lang.Object[] $r1;
        java.lang.Integer[] $r2;

        $r0 := @this: my.example.HelloWorld.MainActivity$HelloAsyncTask;
        staticinvoke <myScheduler.MyScheduler: void waitMyTurn()>();
        $r1 := @parameter0: java.lang.Object[];
        $r2 = (java.lang.Integer[]) $r1;
        virtualinvoke $r0.<my.example.HelloWorld.MainActivity$HelloAsyncTask: void onProgressUpdate(java.lang.Integer[])>($r2);
        return;
    }
}
